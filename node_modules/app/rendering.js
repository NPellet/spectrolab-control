

// Note: This is a singleton instance

var stream = require("../../app/stream"),
	fs = require('fs'),
	liquid = require("liquid-node"),
	lengine = new liquid.Engine,
	Promise = require('bluebird'),
	path = require('path'),
	os = require('os');

var http = require('http');
var application = require("app/app");
	

var	renderer = {},
	wrappers = [],
	modulesName = {},
	modulesId = {},
	modules = [],
	stylesheets = [];

var connectModules = [];

var mainHTML;
var templateModule;

application.setRenderer( renderer );

renderer.addStylesheet = function( file ) {
	stylesheets.push( file );
}

renderer.render = function( ) {


	lengine.registerFileSystem(new liquid.LocalFileSystem("app/html/"));

	return lengine.parseAndRender( fs.readFileSync( './app/html/page.tpl'), application.getTplData() );
}


renderer.startServer = function() {
/*
	process.on('uncaughtException', function (exception) {
	  console.log(exception); // to see your exception details in the console
	  // if you are on production, maybe you can send the exception details to your
	  // email as well ?

	});
*/
		
	lengine.parse( fs.readFileSync( './app/html/module.tpl', 'utf-8' ) ).then( function( tpl ) {
		templateModule = tpl;
	});


	var prefix = '../';
	
	http.createServer(function (req, res) {

	    if(req.url.indexOf('.js') != -1){ //req.url has the pathname, check if it conatins '.js'

			if( req.url.indexOf('client/getmodule-') > -1 ) {

				fs.readFile( path.resolve( "app/modules/" + req.url.replace('client/getmodule-', '').replace('.js', '') + '/client.js' ), function (err, data) {
					if (err) console.log(err);
					res.writeHead(200, {'Content-Type': 'text/javascript'});
					res.write(data);
					res.end();
				});
					return;
			}


			if( req.url.indexOf('getfile-') > -1 ) {


				fs.readFile( path.resolve( "app/" + req.url.replace('getfile-', '') ), function (err, data) {
					if (err) console.log(err);
					res.writeHead(200, {'Content-Type': 'text/javascript'});
					res.write(data);
					res.end();
				});
					return;
			}


	      fs.readFile( path.resolve( "." + req.url ), function (err, data) {
	        if (err) console.log(err);
	        res.writeHead(200, {'Content-Type': 'text/javascript'});
	        res.write(data);
	        res.end();
	      });

	      return;
	    }



	    if(req.url.indexOf('.png') != -1){ //req.url has the pathname, check if it conatins '.js'

	      fs.readFile( path.resolve( "." + req.url ), function (err, data) {
	        if (err) console.log(err);
	        res.writeHead(200, {'Content-Type': 'image/png'});
	        res.write(data);
	        res.end();
	      });

	      return;
	    }




	    if(req.url.indexOf('.css') != -1){ //req.url has the pathname, check if it conatins '.css'


	      fs.readFile( path.resolve( "." + req.url ), function (err, data) {
	        if (err) console.log(err);
	        res.writeHead(200, {'Content-Type': 'text/css'});
	        res.write(data);
	        res.end();
	      });

	  	  return;
	    }

	    if( req.url.indexOf('.woff') > -1 ) {


	      fs.readFile( path.resolve( "." + req.url ), function (err, data) {
	        if (err) console.log(err);
	        res.writeHead(200, {'Content-Type': 'application/font-woff'});
	        res.write(data);
	        res.end();
	      });

	  	  return;
	  	  
	    }


	  renderer.render().then( function( mainHTML ) {
	  	res.writeHead(200, {'Content-Type': 'text/html'});
	  	res.end( mainHTML );	
	  })
	  

	} ).listen( 1337, '0.0.0.0' );

}

renderer.renderGrid = function( rendering, ws ) {

	if( rendering ) {

		this.currentRendering = rendering;
		var experimentModules = rendering.modules;
		var method = rendering.method;

		modules = [];
		this.modulesPromises = [];

		for( var i in experimentModules ) {

			var moduleConstructor = require( path.resolve( './app/modules/', experimentModules[ i ].path, 'module.js' ) ).Constructor;
			var module = new moduleConstructor( experimentModules[ i ].options );
			module.init( experimentModules[ i ].path, i );

			module.setFolder( path.resolve('./app/modules/', experimentModules[ i ].path ) );
			module.setRelativePath( experimentModules[ i ].path );
			module.setTitle( experimentModules[ i ].title );

			modules.push( module );
			modulesId[ module.getId() ] = module;
			modulesName[ module.getName() ] = module;

			module
				.setTitle( experimentModules[ i ].title )
				.setTop( experimentModules[ i ].top )
				.setLeft( experimentModules[ i ].left )
				.setWidth( experimentModules[ i ].width )
				.setHeight( experimentModules[ i ].height );

			this.modulesPromises.push( module.renderHTML( templateModule ) );
		}

		method( renderer );

	}

	// If something exists...
	if( this.modulesPromises ) {

		Promise.all( this.modulesPromises ).then( function( htmls ) {

			if( rendering ) {
				stream.setModules( modulesId );
			}
				
			stream.globalOut( "html", htmls, ws );
		} );
	}
	
}


renderer.modulesReady = function( ws ) {

	modules.map( function( module ) {

		module.inDom( ws );
		module.sendStatus();
	} );
}


renderer.getModuleByName = function( moduleName ) {

	if( ! modulesName[ moduleName ] ) {
		throw "No module with name " + moduleName + " exists";
	}

	return modulesName[ moduleName ];
}

renderer.getModules = function() {
	return allModulesByName;
}


renderer.lockModules = function( modules, message ) {

	var self = this;
	if( ! Array.isArray( modules ) ) {
		modules = [ modules ];
	}

	modules.map( function( module ) {
		self.getModuleByName( module ).lock( message );
	})
}


renderer.unlockModules = function( modules, message ) {

	var self = this;

	if( ! Array.isArray( modules ) ) {
		modules = [ modules ];
	}

	modules.map( function( module ) {
		self.getModuleByName( module ).unlock( message );
	})
}


renderer.getModule = renderer.getModuleByName;

module.exports = renderer;
