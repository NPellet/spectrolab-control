var instruments; // All the instruments
var state; // Current state
var deviceProcedure, currentDeviceProcedure;

var renderer = require('app/renderer');
var deviceProcedures = require('../../deviceprocedures/device');
var ITXBuilder = require("../../server/databuilder/itx").ITXBuilder;
var fileSaver = require("../../server/filesaver");

var config = require('../../server/config.js');
var fs = require('fs');
var extend = require('extend');
var stream = require('../../server/stream');


stream.onGlobalMessage('experiment-run', function() {


	if( deviceProcedure ) {
		deviceProcedure.run();
	}

	stream.globalOut( "experiment-running" );
});

stream.onGlobalMessage('experiment-pause', function() {
	if( deviceProcedure ) {
		deviceProcedures.pause( currentDeviceProcedure );
	}

	stream.globalOut( "experiment-paused" );
});

stream.onGlobalMessage('experiment-resume', function() {
	if( deviceProcedure ) {
		deviceProcedures.resume( currentDeviceProcedure );
	}

	stream.globalOut( "experiment-running" );
});

var exports = {

	/**
	 *	Load instruments into the experiment
	 *	@param {...string} instruments All the instruments to load
	 */
	loadInstruments: function( ) {

		if( typeof config != "object" ) {
			throw "Import instruments needs to load the config"
		}

		var toReturn = [];

		Array.prototype.shift.call( arguments );

		if( arguments.length == 0 ) {
			arguments = [];
			var files = fs.readdirSync("controllers/");
			for( var i = 0; i < files.length; i ++ ) {

				if( fs.lstatSync( "controllers/" + files[ i ] ).isDirectory() && files[ i ].substr( 0, 1 ) != "_" ) {
					arguments.push( files[ i ] );
				}

	 		}

		}

		for( var i = 0, l = arguments.length; i < l ; i ++ ) {

			var instr = require('../../controllers/' + arguments[ i ] + '/default/controller' );
			var module = require('../../server/modules/instruments/' + arguments[ i ] + '/connect/module' );

			toReturn[ arguments[ i ] ] = {};

			toReturn[ arguments[ i ] ].instrument = new instr( config.instruments[ arguments[ i ] ] );
			toReturn[ arguments[ i ] ].moduleName = 'instruments/' + arguments[ i ] + '/connect';
			toReturn[ arguments[ i ] ].moduleConstructor = module.Constructor;
		}

		instruments = toReturn;
	},

	addInstrumentConnectModules: function() {
		renderer.setInstrumentsToWrapper( instruments, "control" );
	},

	/**
	 *	Returns the renderer. Must be set by the experiment
	 *	@return renderer
	 */
	getRenderer: function() {
		return renderer;
	},

	/**
	 * Returns the config json
	 *
	 */
	getConfig: function() {
		return config
	},

	getFileSaver: function() {
		return fileSaver;
	},

	getITXBuilder: function() {
		return ITXBuilder;
	},

	getInstruments: function() {
		return instruments;
	},

	/**
	 *	Get device experiment procedure
	 *	@param {string} experimentName Experiment name
	 *	@return {object} experiment file
	 */
	 getDeviceProcedure: function( experimentName, parameters ) {

	 	if( deviceProcedure ) {
	 		return deviceProcedure;
	 	}

	 	parameters = parameters ||Â {};
	 	extend( parameters, { instruments: instruments } );
	 	currentDeviceProcedure = experimentName;
	 	deviceProcedure = deviceProcedures.method( experimentName, parameters );
	 	return deviceProcedure;
	 },

	 /**
	  *	Sets the current status of the measurement.
	  *	@param {object} stateToSet
	  */
	 setState: function( stateToSet ) {
	 	state = stateToSet;

	 	state.modules = {};
	 	renderer.allModules( function( module ) {

	 		state.modules[ module.getName() ] = module.getState();
	 	} );
	 },

	 /**
	  *	Gets the current status of the measurement
	  */
	 getState: function( ) {

	 	if( ! state ) {

	 		if( fs.fileExists( exports.getExperimentFolder() + "experiment_state.json" ) ) {

	 			//JSON.parse( )

	 		}
	 	}
	 	return state;
	 },

	 /**
	  *	Saves the current status of the measurement
	  */
	  saveState: function( ) {

		var fileInfo = fileSaver.save( {
			contents: JSON.stringify( state ),
			forceFileName: "experiment_state",
			fileExtension: 'json',
			dir: exports.getExperimentFolder()
		} );
	  },


	  getConfig: function() {
	  	return exports.config;
	  }



}

module.exports = exports;
