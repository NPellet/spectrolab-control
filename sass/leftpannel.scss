
@import 'mixins';
@import 'variables';

#leftpannel {
	
	padding: 0px;

	> div {
		margin: 0px;
		padding: 0px;
		height: 100%;
		border-right: 1px solid $color1;


		border-right: 1px solid #aac6c4;
		height: 100vh;
		margin: 0px;
		padding: 0px;

		@include gradient( 340deg, 10%, 13% );

	}

	> div:last-child li.title {
		background: #aac6c4 !important;
	}

	ul {
		list-style-type: none;
		margin: 0px;
		padding: 0px;

		li {


			text-indent: 0px;
			border-bottom: 1px solid #aac6c4;
			background-color: transparent;
			border-radius: 0px;

			border-left-width: 0px;
			border-right-width: 0px;

			&.title {
				font-weight: bold;
				font-size: 1.2em;
				
				border-bottom: 1px solid #aac6c4;				

				@include gradient( 270deg, 0%, 0% );
			}

			&.add {
				color: $color1;
				cursor: pointer;
			}

			&:hover {
				background-color: #f0f0f0;
				color: black;
			}

			&.selected, &.connected {

				background-color: #dff0d8;

				&:hover {
					background-color: darken( #dff0d8, 20% );
				}
			}
			
			&.error {

				background-color: #E8B7B7;

				&:hover {
					background-color: darken( #E8B7B7, 20% );
				}
			}

			
			.configuremethod {
				cursor: pointer;
			}

			&.instrument {
				cursor: pointer;



				&.connecting {
					cursor: default;
					background-color: #E8DBC5;
					color: #666666;

					.connecting.glyphicon-refresh {
						@include animation( spin, 4 );
					}

				}

			}
		}
	}
}


@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}
